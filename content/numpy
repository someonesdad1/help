*numpy*

|array_creation|
|ufuncs|
|basic_functions|
|polynomials|
|array_attributes|
|array_methods|
|indexing|
|linalg|
|fft|
|random|
|set_operations|

Selecting
    x = arange(5)
    x > 3
        array([False, False, False, False, True], dtype=bool)
    However, you can't use something like
        0 < x < 3
    because you'll get an error about the truth value being ambiguous.
    There are two ways of doing this.  The first way returns an array
    that only has the elements that satisfied the condition:
        tmp = bitwise_and(0 < x, x < 3)
        extract(tmp, x)
            array([1, 2])
    The other way is to use where(), which takes the boolean array as
    the first value, returns the corresponding element of the second
    array if boolean element is True, and the last element/value if
    False:
        tmp = bitwise_and(0 < x, x < 3)
        where(tmp, x, -99)
            array([-99,   1,   2, -99, -99])
    Thus, extract can change the size of the array; where doesn't.

    Some useful definitions might be:
        And = bitwise_and
        Or  = bitwise_or
        Xor = bitwise_xor

Changing array type:
    x = arange(1, 10, 0.5)
    print x
    x = x.astype(int)
    print x

results in:
    [ 1.   1.5  2.   2.5  3.   3.5  4.   4.5  5.   5.5  6.   6.5  7.   7.5
      8.   8.5  9.   9.5]
    [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9]

Reverse an array:
    a = arange(6)
    a[::-1] gives
        array([5, 4, 3, 2, 1, 0])

Overview of functions:
    Look at examples at 
        http://www.scipy.org/Numpy_Example_List

    Array Creation
        arange, array, copy, empty, empty_like, eye, fromfile,
        fromfunction, identity, linspace, logspace, mgrid, ogrid, ones,
        ones_like, r , zeros, zeros_like 

    Conversions
        astype, atleast_1d, atleast_2d, atleast_3d, mat 

    Manipulations
        array_split, column_stack, concatenate, diagonal, dsplit, dstack,
        hsplit, hstack, item, newaxis, ravel, repeat, reshape, resize,
        squeeze, swapaxes, take, transpose, vsplit, vstack 

    Questions
        all, any, nonzero, where 

    Ordering
        argmax, argmin, argsort, max, min, ptp, searchsorted, sort 

    Operations
        choose, compress, cumprod, cumsum, inner, fill, imag, prod, put,
        putmask, real, sum 

    Basic Statistics
        cov, mean, std, var 

    Basic Linear Algebra
        cross, dot, outer, svd, vdot

----------------------------------------------------------------------
Some examples

Use set_printoptions() to control how output looks

Define a matrix and get its transpose, inverse, and determinant.  Note that
arrays are just stored as linear arrays and the indexing is imposed after
the data are in memory (which is why you can change the shape of an array).  
Indexing is [a,b,c,...] in row-major order.

    import numpy as np
    A = np.array(range(4))
    print A
        array([0, 1, 2, 3])
    # Change its shape to a two-dimensional array
    A.shape = (2, 2)
    print A
        array([[0, 1],
               [2, 3]])
    # Transpose
    print A.T
        array([[0, 2],
               [1, 3]])
    # Inverse
    print A.I
        Gets an exception because an array has no I attribute.  We need to
        make it a matrix first:
    print np.matrix(A).I
        matrix([[-1.5,  0.5],
                [ 1. ,  0. ]])
    # Determinant
    print np.linalg.det(matrix(A))
        -2.0
    # Flatten an array (A.flat is an iterator)
    array(A.flat)
        array([0, 1, 2, 3])
    # Do the same thing by changing the shape
    rows, cols = A.shape
    A.shape = rows*cols
    print A
        array([0, 1, 2, 3])
    # You can make arrays with dimensions larger than 2:
    a = array(range(3**3))
    a.shape = 3, 3, 3
    print a
        array([[[ 0,  1,  2],
                [ 3,  4,  5],
                [ 6,  7,  8]],

               [[ 9, 10, 11],
                [12, 13, 14],
                [15, 16, 17]],

               [[18, 19, 20],
                [21, 22, 23],
                [24, 25, 26]]])
    print a[1,0,2]
        11
    print a[:,0,2]
        array([ 2, 11, 20])
    print a[:,:,2]
        array([[ 2,  5,  8],
               [11, 14, 17],
               [20, 23, 26]])
    print a[2,:,:]
        array([[18, 19, 20],
               [21, 22, 23],
               [24, 25, 26]])

Manipulate rows and columns of matrices
    import numpy as np
    a = np.matrix(np.array(range(4)))
    print a
        matrix([[0, 1],
                [2, 3]])
    # Print first row
    print a[0,:]
        matrix([[0, 1]])
    # Print second column
    print a[:,1]
        matrix([[1],
                [3]])
    # Indexing lets you change elements
    a[0,1] = 16
    print a
        matrix([[ 0, 16],
                [ 2,  3]])
    # Insert an array into the second column.  Note you have to get the
    # dimensions right and make it a column vector if you're inserting a
    # column.
    a[:,1] = matrix(array((-1, -2))).T
    print a
        matrix([[ 0, -1],
                [ 2, -2]])

Note that numpy often gives you back a view of an array:
    x = np.arange(5)
        => array([0, 1, 2, 3, 4])
    y = x[::2]
        => array([0, 2, 4])
    Now, change an element of x:  x[0] = 3.  If you print y, you see
        y => array([3, 2, 4])
    Thus, y is a view of x.


frompyfunc(func, n_param_in, n_param_out)  Wraps a python function so it
    can accept numpy arrays.
    Example:
        def F(x): 
            return 100*x
        f = frompyfunc(F, 1, 1)
        a = array([1, 2, 3])
        print f(a)
    Produces [100 200 300]

----------------------------------------------------------------------
Array creation                              *array_creation*

Creating arrays
    array(object, dtype=None, copy=True, order=None, subok=False, admin=0)
        Create an array object from the passed object.  If copy is
        False, the returned object is a copy of the array only if
        dtype is not equivalent to the data type of object.  Order can
        be "Fortran"; defaults to "C".

      dtypes:               character
        +   bool_               ?
            byte                b
            short               h
            intc                i
        +   int_                l
            longlong            q
            intp                p
            ubyte               B
            ushort              H
            uintc               I
            uint                L
            ulonglong           Q
            uintp               P
            single              f
        +   float_              d
            longfloat           g
            csingle             F
        +   complex_            D
            clongfloat          G
        +   object_             O
        +   str_                S#
        +   unicode_            U#
            void                V#
        + denotes built-in python types.

    arange(start, stop=None, step=1)

    linspace(start, stop, n)
        linspace(0, 2, 7) gives
            array([ 0.   ,  0.333,  0.667,  1.   ,  1.333,  1.667,  2.  ])
        Note that start and stop are included.  The increment is 
        (stop - start)/(n - 1).

    zeros(shape)
        Example:    
            zeros((2, 3)) produces
                array([[ 0.,  0.,  0.],
                       [ 0.,  0.,  0.]])
            zeros(3) produces
                array([ 0.,  0.,  0.])

    ones(shape)

    fromstring(string, dtype=int, count=-1, sep="")
        Convert the raw binary string.  If sep is not "", interpret
        the string in ASCII mode with the provided separator and
        convert it to an array of numbers.  Additional whitespace will
        be ignored.

            fromstring("1x2x8", sep="x") gives array([ 1.,  2.,  8.])

    fromiter(iter_or_generator)

    load(file)          Load pickled array from open file == cPickle.load(file)

    loads(file)         Load pickled array from string == cPickle.loads(str)

    fromfunction(func, dimensions, **kwargs)
        Construct an array from a function called on a tuple of index grids.
        The function should take array arguments.  Keyword arguments will be
        passed to func.  Example:
            >>> print fromfunction(lambda i,j: i+j, (2,3))
            [[ 0. 1. 2.]
            [ 1. 2. 3.]]

    identity(n)         2-d square array of size n

    where(condition [,x,y])
        x if true, y if false.  If no x,y, then same as nonzero(condition)
        Example:
            a = array([1, 2, 3, 4])
            print where(a > 2, 88, 99)
            Gives:  [99 99 88 88]

    nonzero(condition)

    matrix(data, dtype=None, copy=True)
        Also aliased to mat and asmatrix (copy=False for asmatrix).
        See |linalg| for things that can operate on matrices.
        Create a matrix.  You can use a string:
            a = mat("1 2 3; 4 5 3")
        Matrix objects have special attributes:
            a.T     Return transpose
            a.H     Return conjugate transpose (Hermitian conjugate)
            a.I     Return inverse
            a.A     Return as an array.  Example:
                a=mat("1 2;3 4")
                a.A gives
                    array([[1, 2],
                           [3, 4]])
        You can also use nested sequences:
            mat([[1,5,10],[1.0,3,4j]])
        * means matrix multiply.
        To multiply a matrix A by a scalar b, use multiply(b, A)
        To divide, use divide()
        Also see
            http://docs.scipy.org/doc/numpy/reference/routines.math.html
        Index rows and columns as A[i, j]
        Get row i using e.g. A[i, :]
        Get column i using e.g. A[:, i]

    bmat(obj, ldict=None, gdict=None)
        Build up a matrix from a string, nested sequence, or an array.  The
        dict parameters are only used if obj is a string; if not present,
        the local and global (module) dictionaries are used.
            A = mat("2 2; 2 2"); B=mat("1 1; 1 1")
            print bmat("A B; B A")
            matrix([[2, 2, 1, 1],
                    [2, 2, 1, 1],
                    [1, 1, 2, 2],
                    [1, 1, 2, 2]])

Operations on two or more arrays
    concatenate(seq, axis=0)    Concatenate from elements of sequence along
        the given axis.  If axis is None, then flatten each sequence.
    correlate(x, y)     1-d cross correlation
    convolve(x, y)      Convolution
    inner(x, y)         Inner product
    outer(x, y)         Outer product
    dot(x, y)           Matrix product
    vdot(x, y)          Dot product after flattening
    cross(x, y)         Cross product of two arrays of vectors

Printing arrays
    set_printoptions(
        precision=None, 
        threshold=None, 
        edgeitems=None, 
        linewidth=None, 
        suppress=None)
            precision is default num of digits [8]
            threshold is when only ends are printed [1000]
            edgeitems is num in summary for each dimension [3]
            linewidth [75]
            suppress is boolean whether to suppress printing of small floating
                point values using scientific notation [False]
    get_printoptions()

---------------------------------------------------------------------------
Basic functions                              *basic_functions*

average(a, axis=None, weights=None, returned=0)
    Average along indicated axis; if None, average over entire array.
    Weights must have same shape as a.  If returned is true, return a
    tuple showing both the result and the sum of the weights (or count
    of the values).

cov(x, y=None, rowvar=1, bias=0)
    Covariance matrix of x.  If y is given, it is treated as another 
    variable to be appended to x.  If rowvar is True, then variables are in
    rows and observations are in columns.

corrcoef(x, y=None, rowvar=1, bias=0)
    rho[i,j] = cov[i,j]/(sqrt(C[i,i]C[j,j]))

msort(a)
    Returns a new array sorted along the first axis.

median(a)
    Returns median of a along its first dimension.

bincount(list, weights=None)
    list is 1-d integer array.

histogram(x, bins=None, range=None, normed=0)
    Returns (h, bins) where h is the histogram.  x is treated as a 1-d
    array.  If bins is not a sequence, then it is number of bins which 
    will be constructed from range[0] to range[1] or x.min() to x.max().
    If normed is true, the histogram is normalized and is like a pdf; 
    otherwise, it will contain counts.

unique(seq) 
    Returns unique items in the 1-d sequence.

extract(condition, x)
    condition is a boolean array; extract elements of x where condition 
    is True.

delete(x, indices, axis=None)           Return a new array

insert(x, indices, values, axis=None)   Create a new array

append(x, values, axis=None)            Return a new array

vectorize(pyfunc, otypes=None, doc=None)
    Creates a class that has a call method to wrap the python function.
    Output types can be controlled by otypes; otherwise, they're figured
    out from the first call.

round_(x, decimals=0)  Like python's round, except rounds to nearest even

---------------------------------------------------------------------------
Polynomials                                        *polynomials*

Given p is a polynomial object, it is callable with a number or sequence
to evaluate it.

poly1d(coeff_or_roots, r=0)  Returns a polynomial class.  Uses roots if r = 1.
    p = poly1d([1,2,3]); print p
        produces:
           2
        1 x + 2 x + 3
    Class attributes:
        p.r     Roots
        p.o     Polynomial order
        p.c     Coefficients array
        p[k]    Returns the coefficient on the kth power of x (backwards from
                the indexing of the coefficient array)
  * NOTE:  if the polynomial object has complex coefficients, it will
  * print out as if it had real coefficients (the numbers are the magnitudes
  * of the coefficients).  You must check the coefficient array's type to 
  * be sure.
poly(roots_or_matrix)
    Returns sequence of coefficients representing a polynomial.  If argument
    is a matrix, returns the characteristic polynomial.
        p = poly([-1,-1]); print p
            produces
            [1 2 1]
roots(p)    Returns the roots of the polynomial.  p can be a sequence of
    coefficients or a polynomial object.
polyint(p, m=1, k=None)
    Returns the mth order integral of the polynomial.  If k is None, use
    0 for the integration constants.
polyder(p, m)   Returns the mth order derivative of p.
polyadd(p1, p2)
polysub(p1, p2)
polymul(p1, p2)
polydiv(p1, p2) Returns quotient and remainder as poly objects.
polyfit(x, y, N)
    Computer a best-fit Nth order polynomial y(x).  Minimizes average-squared
    error.o

---------------------------------------------------------------------------
Set Operations                                     *set_operations*

unique1d(a, return_index=False)
intersect1d(a, b)
intersect1d_nu(a, b)  Return sorted intersection but allow args to be
    N dimensional arrays with non-unique elements.  Equivalent to 
    intersect1d(unique1d(a), unique1d(b)).
union1d(a, b)
setdiff1d(a, b)
setxor1d(a, b)  Return sorted set of the xor of the arrays.
setmember1d(tocheck, set)   Return a boolean 1d array the length of tocheck
    that's True whenever that element is in set.  Equivalent to
    array([x in set for x in tocheck]).

---------------------------------------------------------------------------
ufuncs                                              *ufuncs*

For large array processing, using the optional output slot in the ufunc
can reduce temporary object creating, saving time and memory.

add(x1, x2 [,y]) 
subtract(x1, x2 [,y])
multiply(x1, x2 [,y])
divide(x1, x2 [,y])         Integer division is truncated
true_divide(x1, x2 [,y])    Integer division returns floating point
floor_divide(x1, x2 [,y])   x1 // x2
negative(x1, [,y])
power(x1, x2 [,y])          x1**x2
remainder(x1, x2 [,y])      x1 % x2
mod(x1, x2 [,y])            x1 % x2
fmod(x1, x2 [,y])           y = x1 - k*x2 where k is largest integer
absolute(x, [,y])           Same as abs(x)
rint(x1, x2 [,y])           Rounds to nearest integer
sign(x1, x2 [,y])           signum
conj(x, [,y])               Complex conjugate
conjugate(x, [,y])          Same as conj
exp(x [,y])
log(x [,y])
expm1(x [,y])               exp(x) - 1, accurate for small abs(x)
log1p(x [,y])               log(1+x), accurate for small abs(x)
log10(x [,y])
sqrt(x [,y])
square(x [,y])
reciprocal(x [,y])
ones_like(x [,y])           Returns array with same shape as x with all 1's

Trig ufuncs
    sin(x [,y])
    cos(x [,y])
    tan(x [,y])
    arcsin(x [,y])
    arccos(x [,y])
    arctan(x [,y])
    arctan2(x1, x2 [,y])        Proper quadrant, -pi < y <= pi
    hypot(x1, x2 [,y])          sqrt(x1**2 + x2**2)
    sinh(x [,y])
    cosh(x [,y])
    tanh(x [,y])
    arcsinh(x [,y])
    arccosh(x [,y])
    arctanh(x [,y])

Bit-twiddling (need integer arguments)
    bitwise_and(x1, x2 [,y])    x1 & x2
    bitwise_or(x1, x2 [,y])     x1 | x2
    bitwise_xor(x1, x2 [,y])    x1 ^ x2
    invert(x, [,y])             ~x
    left_shift(x1, x2 [,y])     x1 << x2
    right_shift(x1, x2 [,y])    x1 >> x2

Comparison functions
    greater(x1, x2 [,y])        x1 > x2 (returns boolean array)
    greater_equal(x1, x2 [,y])  x1 >= x2 (returns boolean array)
    less(x1, x2 [,y])           x1 < x2 (returns boolean array)
    less_equal(x1, x2 [,y])     x1 <= x2 (returns boolean array)
    not_equal(x1, x2 [,y])      x1 != x2 (returns boolean array)
    equal(x1, x2 [,y])          x1 == x2 (returns boolean array)

    These are useful in combination with indexing.  For example, 
    a[a > 10] = 10 clips all array values to a maximum of 10.

Logical (0's are False, all others are True)
    logical_and(x1, x2 [,y])     
    logical_or(x1, x2 [,y])     
    logical_xor(x1, x2 [,y])     
    logical_not(x1, x2 [,y])     

Maximum and minimum
    maximum(x1, x2 [,y])     
    minimum(x1, x2 [,y])     

    Note these should be used, not python's max and min, as maximum and 
    minimum will work properly for arrays with more than one dimension.
    Examples:
        >>> maximum([1,0,5,10], [3,2,4,5])
        array([ 3, 2, 5, 10])
        >>> max([1,0,5,10], [3,2,4,5])
        [3, 2, 4, 5]

Floating functions
    isreal(x)
    iscomplex(x)
    isfinite(x)
    isinf(x)
    isnan(x)
    signbit(x)              x > 0 or if NaN or inf, actual sign
    modf(x [,y1,y2])        Fractional and integral parts
        modf(array([-8.2])) = (array([-0.2]), array([-8.]))
    ldexp(x, n [,y])        Fast mult by power of 2:  y = x*2**n
    frexp(x, [,y,n])        Inverse of ldexp
    fmod(x1, x2 [,y])       See above
    floor(x [,y])           Returns largest integer <= x
    ceil(x [,y])            Returns smallest integer >= x

---------------------------------------------------------------------------
Array Attributes                              *array_attributes*

Not all are mentioned.  * means settable.

    T               Same as self.transpose() (self is returned if the
                    number of dimensions is 1)
    ndim            Number of dimensions in array.
    shape       *   Tuple showing shape; use to re-shape.  Total number of
                    elements cannot change.  A -1 may be used to tell the
                    reshaping to compute that dimension.
    size            Total number of elements.
    flat            A 1-D iterator over the array's elements
    dtype       *   Data-type object for this array.  Use x.dtype.name
                    to see a string representation.
    itemsize        Size in bytes of each element.
    flags           State of flags in this array
    strides     *   Tuple showing how many bytes must be jumped in data
                    segment to get from one entry to the next.
    nbytes          Total number of bytes used
    real        *   Real part of array
    imag        *   Imaginary part (or read-only zero array if type is not 
                    complex)

---------------------------------------------------------------------------
Array Methods                                 *array_methods*

See end of section for alphabetical list

tolist()        Convert to a nested list
tostring(order="C")     A python string showing the contents of raw memory.

tofile(file=None, sep="", format="")
    Write contents of self to an open file object; if file is a string, then
    open a file of that name.  If sep is "", write in binary.  If sep is any
    other string, write in text mode with sep as the separator.  In text 
    mode, format can specify the form; if format is empty, uses "%s".
    NOTE:  this is NOT a platform-independent way of writing data, as
    endianness and precision is lost.
    Example:    a = array([1, 4.5])
                a.tofile(sys.stdout, sep=" ") produces
                1.0 4.5
dump(file)      == cPickle.dump(self, file, 2)
dumps(file)     == cPickle.dumps(self, 2)
astype({None})  Force conversion to specified type
copy()          Returns copy of array
fill(scalar)

Shape manipulation
    reshape(newshape, order="C")
        Return a new array.  newshape is a tuple.  If scalar, reshape to one
        dimensional.  Number of elements can't change.
    resize(newshape)    Resize an array in-place.
    transpose({None})   Return an array view with the shape transposed 
                        according to the argument.
    swapaxes(axis1, axis2)  Special case of transpose.
    flatten(order="C")  Return a new 1-d array with copied data.
    ravel(order="C")    Return a 1-d version of self.
    squeeze()           Return array with all unit-length dimensions squeezed out.

Item selection and manipulation
    take(indices, axis=None, out=None, mode="raise")
    put(indices, values, mode="raise")
    repeat(repeats, axis=None)
    choose(choices, out=None, mode="raise") 
    sort(axis=-1, kind="quick", order=None)  Sort in-place
    nonzero()
    compress(condition)
        x = array([1,2,3])
        x.compress(x > 2)  --> array([3])
        x[x > 2]  --> array([3])

Array calculation
    out can be an array for output; must have the same number of elements.

    These operations apply as if the array was a list of numbers.  If
    you specify the axis, then it is calculated for that axis.  Thus,
    axis 0 for a 2-d array means the columns.  Example:
        a = arange(12).reshape(3, 4)
            array([[ 0,  1,  2,  3],
                   [ 4,  5,  6,  7],
                   [ 8,  9, 10, 11]])
        a.sum() gives 66
        a.sum(axis=0) gives array([12, 15, 18, 21])     Sums columns
        a.sum(axis=1) gives array([ 6, 22, 38])         Sums rows

    max(axis=None, out=None)  Returns largest value in self.
    argmax(axis=None, out=None)  Returns the first index of the largest value
    min(axis=None, out=None)  Returns smallest value in self.
    argmin(axis=None, out=None)  Returns the first index of the smallest value
    ptp(axis=None, out=None)  Returns the diff of largest to smallest
        (i.e., peak-to-peak)
    clip(min, max, out=None)  Clip values to lie between indicated
    conj(out=None)
    conjugate(out=None)
    round(decimals=0, out=None)
    trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)
    sum(axis=0, dtype=None, out=None)
    cumsum(axis=0, dtype=None, out=None)
    mean(axis=0, dtype=None, out=None)
    var(axis=0, dtype=None, out=None)
        NOTE!!  N instead of (N-1) is used as the denominator.
    std(axis=0, dtype=None, out=None)
        NOTE!!  N instead of (N-1) is used as the denominator.
    prod(axis=0, dtype=None, out=None)
    cumprod(axis=0, dtype=None, out=None)
    all(axis=0, out=None)  Return True if all entries along axis are True.
    any(axis=0, out=None)  Return True if any entries along axis are True.


Alphabetical list:

all([axis, out]) 
    Returns True if all elements evaluate to True.
any([axis, out]) 
    Returns True if any of the elements of a evaluate to True.
argmax([axis, out]) 
    Return indices of the maximum values along the given axis.
argmin([axis, out]) 
    Return indices of the minimum values along the given axis of a.
argsort([axis, kind, order]) 
    Returns the indices that would sort this array.
astype(t) 
    Copy of the array, cast to a specified type.
byteswap(inplace) 
    Swap the bytes of the array elements
choose(choices[, out, mode]) 
    Use an index array to construct a new array from a set of choices.
clip(a_min, a_max[, out]) 
    Return an array whose values are limited to [a_min, a_max].
compress(condition[, axis, out]) 
    Return selected slices of this array along given axis.
conj() 
    Complex-conjugate all elements.
conjugate() 
    Return the complex conjugate, element-wise.
copy([order]) 
    Return a copy of the array.
cumprod([axis, dtype, out]) 
    Return the cumulative product of the elements along the given axis.
cumsum([axis, dtype, out]) 
    Return the cumulative sum of the elements along the given axis.
diagonal([offset, axis1, axis2]) 
    Return specified diagonals.
dot(b[, out]) 
    Dot product of two arrays.
dump(file) 
    Dump a pickle of the array to the specified file.
dumps()     
    Returns the pickle of the array as a string.
fill(value)     
    Fill the array with a scalar value.
flatten([order])    
    Return a copy of the array collapsed into one dimension.
getfield(dtype, offset)     
    Returns a field of the given array as a certain type.
item(*args)     
    Copy an element of an array to a standard Python scalar and return it.
itemset(*args)  
    Insert scalar into an array (scalar is cast to array's dtype, if possible)
max([axis, out])    
    Return the maximum along a given axis.
mean([axis, dtype, out])    
    Returns the average of the array elements along given axis.
min([axis, out])    
    Return the minimum along a given axis.
newbyteorder([new_order])   
    Return the array with the same data viewed with a different byte order.
nonzero()   
    Return the indices of the elements that are non-zero.
prod([axis, dtype, out])    
    Return the product of the array elements over the given axis
ptp([axis, out])    
    Peak to peak (maximum - minimum) value along a given axis.
put(indices, values[, mode]) 
    Set a.flat[n] = values[n] for all n in indices.
ravel([order]) 
    Return a flattened array.
repeat(repeats[, axis]) 
    Repeat elements of an array.
reshape(shape[, order]) 
    Returns an array containing the same data with a new shape.
resize(new_shape[, refcheck]) 
    Change shape and size of array in-place.
round([decimals, out]) 
    Return a with each element rounded to the given number of decimals.
searchsorted(v[, side]) 
    Find indices where elements of v should be inserted in a to maintain order.
setasflat(arr) 
    Equivalent to a.flat = arr.flat, but is generally more efficient.
setfield(val, dtype[, offset]) 
    Put a value into a specified place in a field defined by a data-type.
setflags([write, align, uic]) 
    Set array flags WRITEABLE, ALIGNED, and UPDATEIFCOPY, respectively.
sort([axis, kind, order]) 
    Sort an array, in-place.
squeeze() 
    Remove single-dimensional entries from the shape of a.
std([axis, dtype, out, ddof]) 
    Returns the standard deviation of the array elements along given axis.
sum([axis, dtype, out]) 
    Return the sum of the array elements over the given axis.
swapaxes(axis1, axis2) 
    Return a view of the array with axis1 and axis2 interchanged.
take(indices[, axis, out, mode]) 
    Return an array formed from the elements of a at the given indices.
tofile(fid[, sep, format]) 
    Write array to a file as text or binary (default).
tolist() 
    Return the array as a (possibly nested) list.
tostring([order]) 
    Construct a Python string containing the raw data bytes in the array.
trace([offset, axis1, axis2, dtype, out]) 
    Return the sum along diagonals of the array.
transpose(*axes) 
    Returns a view of the array with axes transposed.
var([axis, dtype, out, ddof]) 
    Returns the variance of the array elements, along given axis.
view([dtype, type]) 
    New view of array with the same data.
---------------------------------------------------------------------------
Linear algebra module                                *linalg*

import numpy.linalg

A is a 2-d array

inv(A)              Matrix inverse (also can use A.I attribute)
solve(A, b)         b is a 1-d or 2-d array
cholesky(A)         Cholesky decomposition (A must be Hermitian, pos. def.)
eigvals(A)
eig(A)              Returns tuple of eigenvalues, eigenvectors
eigvalsh(U)         Same as eigvals except for Hermitian only matrices
eigh(U)             Same as eig except for Hermitian only matrices
svd(A)              Singular value decomposition
pinv(A)             Generalized pseudo-inverse (= inverse for invertible matrices)
det(A)              Determinant

---------------------------------------------------------------------------
FFT                                                  *fft*

import numpy.fft

fft(x, n=None, axis=-1)
ifft(X, n=None, axis=-1)    ifft(fft(a)) == a within numerical precision

fft2(x, s=None, axes=(-2,-1))   Two-dimensional fft
ifft2(x, s=None, axes=(-2,-1))
fftn(x, s=None, axes=None)      n-dimensional fft
ifftn(x, s=None, axes=None)     

---------------------------------------------------------------------------
random                                                *random*

import numpy.random

Discrete distributions
    binomial(n, p, size=None)
    geometric(p, size=None)
    hypergeometric(ngood, nbad, nsample, size=None)
    logseries(p, size=None)
    multinomial(n, pvals, size=None)  Produces random vectors of length N
        where N = len(pvals).  n trials of an experiment are independently 
        repeated but each trial results in N possible integers k1, k2, ...,
        kN with sum(ki, i=1..N) = n.  pvals = [p1, p2, ..., pN].
    negative_binomial(n, p, size=None)
    poisson(lam=1, size=None)
    zipf(a, size=None)

Continuous distributions
    Chisquare(nu, size=None)
    exponential(scale=1.0, size=None)
    f(nu1, nu2, size=None)
    gamma(a, scale=1.0, size=None)
    gumbel(loc=0.0, scale=1.0, size=None)
    laplace(loc=0.0, scale=1.0, size=None)
    lognormal(mu=0.0, sigma=1.0, size=None)
    logistic(loc=0.0, scale=1.0, size=None)
    multivariate_normal(mu, C, size=None)
    noncentral_chisquare(nu, lam, size=None)
    noncentral_f(nu1, nu2, lam, size=None)
    normal(loc=0.0, scale=1.0, size=None)
    pareto(a, size=None)
    power(a, size=None)
    rand(d1, d2, ..., dn)       Get an array of indicated shape of uniform rn's
    randint(low, high=None, size=None)    low <= x < high.  If high == None,
        the range is 0 <= x < low.
    randn(d1, d2, ..., dn)      Get an array of indicated shape of normal rn's
    random_integers(low, high=None, size=None)    low <= x <= high.  
        If high == None, range is 1 <= x <= low.  Compare to randint.
    rayleigh(scale=1.0, size=None)
    standard_cauchy(size=None)
    standard_exponential(size=None)
    standard_gamma(a, size=None)
    standard_normal(size=None)
    standard_t(nu, size=None)
    triangular(left, mode, right, size=None)
    uniform(low=0.0, high=1.0, size=None)    x from [low, high)
    vonmises(mu, kappa, size=None)
    wald(mu, lam, size=None)
    weibull(a, size=None)

Utilities
    bytes(length)       Random bytes
    get_state()
    set_state(state)
    shuffle(sequence)   Randomly shuffle a one dimensional sequence
    permutation(n)      Return permutation of integers from 0 to n-1

---------------------------------------------------------------------------
Indexing                                                *indexing*

Let A be a 10x20 array.
    A[3] is the same as A[3, :] and represents the fourth length-20 "row"
    of the array.

    A[:, 3] represents the fourth length-10 "column".

    Every third element of the fourth column can be selected as A[::3, 3].

Ellipses
    Ellipses can replace zero or more ":" terms.

    Let A be 10x20x30x40
        A[3:,...,4] is equivalent to A[3:,:,:,4]
        A[...,3] is equivalent to A[:,:,:,3].

Index arrays
    You can use integer arrays to index into another array.  Example:

        x = arange(10,1,-1)
            => x is array([10,  9,  8,  7,  6,  5,  4,  3,  2])
        x[array([3, 3, -1, 7])
            => gives array([7, 7, 2, 3])
    You can also use multidimensional arrays; an array of the same shape is
    returned but filled out with the values from the indexed array:
        x[np.array([[1,1],[2,3]])]
        =>  array([[9, 9],
                   [8, 7]])

Try the following code:
    from numpy import *

    a = arange(60).reshape(3, 4, 5); print a
    print
    print "a[...,3]"
    print a[...,3]
    print

    print "a[1,...,3]"
    print a[1,...,3]
    print

    print "a[:,:,2]"
    print a[:,:,2]
    print

    print "a[0,::2,::2]"
    print a[0,::2,::2]
    print

produces

    [[[ 0  1  2  3  4]
      [ 5  6  7  8  9]
      [10 11 12 13 14]
      [15 16 17 18 19]]

     [[20 21 22 23 24]
      [25 26 27 28 29]
      [30 31 32 33 34]
      [35 36 37 38 39]]

     [[40 41 42 43 44]
      [45 46 47 48 49]
      [50 51 52 53 54]
      [55 56 57 58 59]]]

    a[...,3]
    [[ 3  8 13 18]
     [23 28 33 38]
     [43 48 53 58]]

    a[1,...,3]
    [23 28 33 38]

    a[:,:,2]
    [[ 2  7 12 17]
     [22 27 32 37]
     [42 47 52 57]]

    a[0,::2,::2]
    [[ 0  2  4]
     [10 12 14]]

